queue:
  demands: java
steps:
#- task: DotNetCoreInstaller@0
#  displayName: 'Use .NET Core sdk 2.1.403'
#  inputs:
#    version: 2.1.403
# Setup the Sonar Cloud for analysis
- task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
  displayName: 'Prepare analysis on SonarCloud'
  inputs:
    SonarCloud: 'Theatreers Sonarcloud'
    organization: 'theatreers'
    projectKey: $(projectName)
    projectName: $(projectName)
    #extraProperties: |
    # sonar.log.level = DEBUG
    # sonar.verbose = true
# Restore the dependencies for the solution as a whole
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(projectName).sln'
    vstsFeed: 'theatreers.Artifacts'
    restoreDirectory: '$(System.DefaultWorkingDirectory)/$(nugets)'
# Build the solution natively on the agent, to allow sonar cloud
# to analyse as part of the next task.
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(projectName).sln'
    arguments: '--configuration $(BuildConfiguration) --source $(nugets)'
# Execute the Sonar Cloud Analysis, and push to Sonar Cloud
- task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
  displayName: 'Run Code Analysis'
# Build the docker image to run the tests.
# Pass in the packages argument to pass in the directory path
# (deployment variable), also pass in target as test env.
- task: Docker@1
  displayName: 'Build test image'
  inputs:
    imageName: '$(dockerId)/$(imageName)-test:$(Build.BuildId)'    
    arguments: '--build-arg packages="$(nugets)" --target test-env'
    useDefaultContext: false
    buildContext: '$(System.DefaultWorkingDirectory)'
# Run the newly built container, copy the results output
# to the local agent. NOTE there needed to be a separate call to
# docker run, otherwise a failed test causes the task to fail.
- task: CmdLine@2
  inputs:
    script: |
     echo "Unit tests initiated"
     docker run --name test $(dockerId)/$(imageName)-test:$(Build.BuildId)
     docker cp test:/$(projectName).Tests/results/ $(pwd)/
     docker stop test && docker rm test
     echo "Unit tests completed"
    workingDirectory: $(Build.ArtifactStagingDirectory) # Optional
# Publish the test results that are in the mounted volume, that have
# come from the container. This will be a type of VSTest rather than
# XUnit. XUnit does not run the test, VSTest does.
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/results/TEST-*.xml' 
# Build the run-time image for publishing.
# Pass in the packages argument to pass in the directory path
# (deployment variable), also pass in target as test env.
- task: Docker@1
  displayName: 'Build the runtime image'
  inputs:
    imageName: '$(dockerId)/$(imageName):$(Build.BuildId)'    
    arguments: '--build-arg packages="$(nugets)" --target runtime'
    useDefaultContext: false
    buildContext: '$(System.DefaultWorkingDirectory)'
# Login to the Azure Container Registry using the Service Connection
- task: Docker@1
  displayName: 'Login to Azure Container Registry'
  inputs:
   azureSubscriptionEndpoint: 'Theatreers Dev AzureDevOps ServPrin'
   azureContainerRegistry: $(dockerId)
   command: login
# Tag the runtime image (that has the build version) with latest
- task: Docker@1
  displayName: 'Tag the run-time image with latest'
  inputs:
    command: 'Tag image'
    arguments: '$(dockerId)/$(imageName):latest'
    imageName: '$(dockerId)/$(imageName):$(Build.BuildId)'
# Push the runtime image (that has the build version) to registry
- task: Docker@1
  displayName: 'Push the runtime image with version tag'
  inputs:
    command: 'push'
    imageName: '$(dockerId)/$(imageName):$(Build.BuildId)'
# Push the runtime image (that has the latest tag) to registry
- task: Docker@1
  displayName: 'Push the runtime image with latest tag'
  inputs:
    command: 'push'
    imageName: '$(dockerId)/$(imageName):latest'